#include "ConstructorWrapperASTConsumer.h"

#include "clang/Frontend/FrontendPluginRegistry.h"
#include "clang/AST/ASTConsumer.h"

#include "llvm/Support/raw_ostream.h"

#include <vector>
#include <string>

namespace clang {
class CompilerInstance;
} // namespace clang

namespace caf {

/**
 * @brief Clang plugin for registering ConstructorWrapperASTConsumer into the list of AST consumers.
 *
 */
class ConstructorWrapperAction : public clang::PluginASTAction {
protected:
  /**
   * @brief Create an ASTConsumer instance corresponding to this plugin.
   *
   * @param compiler the compiler instance.
   * @return std::unique_ptr<clang::ASTConsumer> the created ASTConsumer instance.
   */
  std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(
      clang::CompilerInstance& compiler, llvm::StringRef) override {
    return llvm::make_unique<ConstructorWrapperASTConsumer>(compiler);
  }

  bool ParseArgs(const clang::CompilerInstance &, const std::vector<std::string> &) override {
    // Nothing to do here.
    return true;
  }

  /**
   * @brief Get the type of this action. This function returns `AddBeforeMainAction` to indicate
   * that this action should be executed before the CodeGen module so that additional stuffs
   * generated by this action (the wrapper functions) can be properly emitted to LLVM IR.
   *
   * @return clang::PluginASTAction::ActionType the action type of this action.
   */
  clang::PluginASTAction::ActionType getActionType() override {
    return clang::PluginASTAction::AddBeforeMainAction;
  }
}; // class ConstructorWrapperAction

} // namespace caf

static clang::FrontendPluginRegistry::Add<caf::ConstructorWrapperAction> X(
    "caf-wrapper", "CAF constructor wrapper consumer");
