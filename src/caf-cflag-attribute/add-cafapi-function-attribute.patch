From 65bedc3b3243e8afceb1d12d90d9bb8696e650b4 Mon Sep 17 00:00:00 2001
From: zyscoder <zyscoder@gmail.com>
Date: Sat, 21 Dec 2019 08:45:05 +0000
Subject: [PATCH] add cafapi function attribute.

---
 docs/BitCodeFormat.rst                      |  1 +
 include/llvm/Bitcode/LLVMBitCodes.h         |  1 +
 include/llvm/IR/Attributes.td               |  5 +++++
 lib/AsmParser/LLLexer.cpp                   |  1 +
 lib/AsmParser/LLParser.cpp                  |  3 +++
 lib/AsmParser/LLToken.h                     |  1 +
 lib/Bitcode/Reader/BitcodeReader.cpp        |  7 +++++++
 lib/Bitcode/Writer/BitcodeWriter.cpp        |  4 ++++
 lib/IR/Attributes.cpp                       |  4 ++++
 lib/IR/Verifier.cpp                         |  2 ++
 lib/Transforms/IPO/ForceFunctionAttrs.cpp   |  1 +
 lib/Transforms/Utils/CodeExtractor.cpp      |  1 +
 tools/clang/include/clang/Basic/Attr.td     |  6 ++++++
 tools/clang/include/clang/Basic/AttrDocs.td |  7 +++++++
 tools/clang/include/clang/Sema/Sema.h       |  3 +++
 tools/clang/lib/CodeGen/CodeGenModule.cpp   |  4 +++-
 tools/clang/lib/Sema/SemaAttr.cpp           |  6 ++++++
 tools/clang/lib/Sema/SemaDeclAttr.cpp       | 16 ++++++++++++++++
 18 files changed, 72 insertions(+), 1 deletion(-)

diff --git a/docs/BitCodeFormat.rst b/docs/BitCodeFormat.rst
index 4ce5be2c..2a29ac53 100644
--- a/docs/BitCodeFormat.rst
+++ b/docs/BitCodeFormat.rst
@@ -1058,6 +1058,7 @@ The integer codes are mapped to well-known attributes as follows.
 * code 57: ``optforfuzzing``
 * code 58: ``shadowcallstack``
 * code 59: ``cafcxxctor``
+* code 60: ``cafapi``
 
 
 .. note::
diff --git a/include/llvm/Bitcode/LLVMBitCodes.h b/include/llvm/Bitcode/LLVMBitCodes.h
index c776776f..59f6c61b 100644
--- a/include/llvm/Bitcode/LLVMBitCodes.h
+++ b/include/llvm/Bitcode/LLVMBitCodes.h
@@ -592,6 +592,7 @@ enum AttributeKindCodes {
   ATTR_KIND_OPT_FOR_FUZZING = 57,
   ATTR_KIND_SHADOWCALLSTACK = 58,
   ATTR_KIND_CAF_CXXCTOR = 59,
+  ATTR_KIND_CAF_API = 60,
 };
 
 enum ComdatSelectionKindCodes {
diff --git a/include/llvm/IR/Attributes.td b/include/llvm/IR/Attributes.td
index 657fa615..acb4fe41 100644
--- a/include/llvm/IR/Attributes.td
+++ b/include/llvm/IR/Attributes.td
@@ -126,6 +126,11 @@ def OptimizeNone : EnumAttr<"optnone">;
 def CafCxxCtor : EnumAttr<"cafcxxctor">;
 // zys end.
 
+// zys
+/// Funcions is a CAF targeted api.
+def CafApi : EnumAttr<"cafapi">;
+// zys end.
+
 /// Function does not access memory.
 def ReadNone : EnumAttr<"readnone">;
 
diff --git a/lib/AsmParser/LLLexer.cpp b/lib/AsmParser/LLLexer.cpp
index 4b3e4aa7..33b5be1f 100644
--- a/lib/AsmParser/LLLexer.cpp
+++ b/lib/AsmParser/LLLexer.cpp
@@ -661,6 +661,7 @@ lltok::Kind LLLexer::LexIdentifier() {
   KEYWORD(optforfuzzing);
   KEYWORD(optnone);
   KEYWORD(cafcxxctor);
+  KEYWORD(cafapi);
   KEYWORD(optsize);
   KEYWORD(readnone);
   KEYWORD(readonly);
diff --git a/lib/AsmParser/LLParser.cpp b/lib/AsmParser/LLParser.cpp
index 3c6f17b1..50789173 100644
--- a/lib/AsmParser/LLParser.cpp
+++ b/lib/AsmParser/LLParser.cpp
@@ -1256,6 +1256,7 @@ bool LLParser::ParseFnAttributeValuePairs(AttrBuilder &B,
       B.addAttribute(Attribute::OptForFuzzing); break;
     case lltok::kw_optnone: B.addAttribute(Attribute::OptimizeNone); break;
     case lltok::kw_cafcxxctor: B.addAttribute(Attribute::CafCxxCtor); break;
+    case lltok::kw_cafapi: B.addAttribute(Attribute::CafApi); break;
     case lltok::kw_optsize: B.addAttribute(Attribute::OptimizeForSize); break;
     case lltok::kw_readnone: B.addAttribute(Attribute::ReadNone); break;
     case lltok::kw_readonly: B.addAttribute(Attribute::ReadOnly); break;
@@ -1597,6 +1598,7 @@ bool LLParser::ParseOptionalParamAttrs(AttrBuilder &B) {
     case lltok::kw_optforfuzzing:
     case lltok::kw_optnone:
     case lltok::kw_cafcxxctor:
+    case lltok::kw_cafapi:
     case lltok::kw_optsize:
     case lltok::kw_returns_twice:
     case lltok::kw_sanitize_address:
@@ -1694,6 +1696,7 @@ bool LLParser::ParseOptionalReturnAttrs(AttrBuilder &B) {
     case lltok::kw_optforfuzzing:
     case lltok::kw_optnone:
     case lltok::kw_cafcxxctor:
+    case lltok::kw_cafapi:
     case lltok::kw_optsize:
     case lltok::kw_returns_twice:
     case lltok::kw_sanitize_address:
diff --git a/lib/AsmParser/LLToken.h b/lib/AsmParser/LLToken.h
index af05fe9b..515f3164 100644
--- a/lib/AsmParser/LLToken.h
+++ b/lib/AsmParser/LLToken.h
@@ -205,6 +205,7 @@ enum Kind {
   kw_optforfuzzing,
   kw_optnone,
   kw_cafcxxctor,//zys !!!
+  kw_cafapi,//zys !!!
   kw_optsize,
   kw_readnone,
   kw_readonly,
diff --git a/lib/Bitcode/Reader/BitcodeReader.cpp b/lib/Bitcode/Reader/BitcodeReader.cpp
index 2fa7d585..75afa7b7 100644
--- a/lib/Bitcode/Reader/BitcodeReader.cpp
+++ b/lib/Bitcode/Reader/BitcodeReader.cpp
@@ -1168,6 +1168,9 @@ static uint64_t getRawAttributeMask(Attribute::AttrKind Val) {
   // zys
   case Attribute::CafCxxCtor:    return 1ULL << 60;
   // zys end.
+  // zys
+  case Attribute::CafApi:    return 1ULL << 61;
+  // zys end.
   case Attribute::Dereferenceable:
     llvm_unreachable("dereferenceable attribute not supported in raw format");
     break;
@@ -1360,6 +1363,10 @@ static Attribute::AttrKind getAttrFromCode(uint64_t Code) {
   case bitc::ATTR_KIND_CAF_CXXCTOR:
     return Attribute::CafCxxCtor;
   // zys end.
+  // zys : CafApi
+  case bitc::ATTR_KIND_CAF_API:
+    return Attribute::CafApi;
+  // zys end.
   case bitc::ATTR_KIND_READ_NONE:
     return Attribute::ReadNone;
   case bitc::ATTR_KIND_READ_ONLY:
diff --git a/lib/Bitcode/Writer/BitcodeWriter.cpp b/lib/Bitcode/Writer/BitcodeWriter.cpp
index fe84d841..59618170 100644
--- a/lib/Bitcode/Writer/BitcodeWriter.cpp
+++ b/lib/Bitcode/Writer/BitcodeWriter.cpp
@@ -658,6 +658,10 @@ static uint64_t getAttrKindEncoding(Attribute::AttrKind Kind) {
   case Attribute::CafCxxCtor:
     return bitc::ATTR_KIND_CAF_CXXCTOR;
   // zys end.
+  // zys : CafApi
+  case Attribute::CafApi:
+    return bitc::ATTR_KIND_CAF_API;
+  // zys end.
   case Attribute::ReadNone:
     return bitc::ATTR_KIND_READ_NONE;
   case Attribute::ReadOnly:
diff --git a/lib/IR/Attributes.cpp b/lib/IR/Attributes.cpp
index 28e1985e..c4c48eae 100644
--- a/lib/IR/Attributes.cpp
+++ b/lib/IR/Attributes.cpp
@@ -313,6 +313,10 @@ std::string Attribute::getAsString(bool InAttrGrp) const {
   if (hasAttribute(Attribute::CafCxxCtor))
     return "cafcxxctor";
   // zys end.
+  // zys : CafApi
+  if (hasAttribute(Attribute::CafApi))
+    return "cafapi";
+  // zys end.
   if (hasAttribute(Attribute::OptimizeForSize))
     return "optsize";
   if (hasAttribute(Attribute::ReadNone))
diff --git a/lib/IR/Verifier.cpp b/lib/IR/Verifier.cpp
index 3afad071..4feb7f18 100644
--- a/lib/IR/Verifier.cpp
+++ b/lib/IR/Verifier.cpp
@@ -1471,6 +1471,8 @@ static bool isFuncOnlyAttr(Attribute::AttrKind Kind) {
   case Attribute::OptimizeNone:
   // zys CafCxxCtor
   case Attribute::CafCxxCtor:
+  // zys CafApi
+  case Attribute::CafApi:
   case Attribute::JumpTable:
   case Attribute::Convergent:
   case Attribute::ArgMemOnly:
diff --git a/lib/Transforms/IPO/ForceFunctionAttrs.cpp b/lib/Transforms/IPO/ForceFunctionAttrs.cpp
index 411281c2..dc07a23f 100644
--- a/lib/Transforms/IPO/ForceFunctionAttrs.cpp
+++ b/lib/Transforms/IPO/ForceFunctionAttrs.cpp
@@ -48,6 +48,7 @@ static Attribute::AttrKind parseAttrKind(StringRef Kind) {
       .Case("optforfuzzing", Attribute::OptForFuzzing)
       .Case("optnone", Attribute::OptimizeNone)
       .Case("cafcxxctor", Attribute::CafCxxCtor)
+      .Case("cafapi", Attribute::CafApi)
       .Case("optsize", Attribute::OptimizeForSize)
       .Case("readnone", Attribute::ReadNone)
       .Case("readonly", Attribute::ReadOnly)
diff --git a/lib/Transforms/Utils/CodeExtractor.cpp b/lib/Transforms/Utils/CodeExtractor.cpp
index 1e4203fe..db8b8395 100644
--- a/lib/Transforms/Utils/CodeExtractor.cpp
+++ b/lib/Transforms/Utils/CodeExtractor.cpp
@@ -748,6 +748,7 @@ Function *CodeExtractor::constructFunction(const ValueSet &inputs,
       case Attribute::OptForFuzzing:
       case Attribute::OptimizeNone:
       case Attribute::CafCxxCtor:
+      case Attribute::CafApi:
       case Attribute::OptimizeForSize:
       case Attribute::SafeStack:
       case Attribute::ShadowCallStack:
diff --git a/tools/clang/include/clang/Basic/Attr.td b/tools/clang/include/clang/Basic/Attr.td
index 681eb350..32c26ea7 100644
--- a/tools/clang/include/clang/Basic/Attr.td
+++ b/tools/clang/include/clang/Basic/Attr.td
@@ -1717,6 +1717,12 @@ def CafCxxCtor : InheritableAttr {
   let Documentation = [CafCxxCtorDocs];
 }
 
+def CafApi : InheritableAttr {
+  let Spellings = [Clang<"cafapi">];
+  let Subjects = SubjectList<[Function, ObjCMethod]>;
+  let Documentation = [CafApiDocs];
+}
+
 def Overloadable : Attr {
   let Spellings = [Clang<"overloadable">];
   let Subjects = SubjectList<[Function], ErrorDiag>;
diff --git a/tools/clang/include/clang/Basic/AttrDocs.td b/tools/clang/include/clang/Basic/AttrDocs.td
index 058e1769..047719cc 100644
--- a/tools/clang/include/clang/Basic/AttrDocs.td
+++ b/tools/clang/include/clang/Basic/AttrDocs.td
@@ -2499,6 +2499,13 @@ This is a flag for CAF to mark all cxx constructors keeped by -fcaf-keep-cxxctor
   }];
 }
 
+def CafApiDocs : Documentation {
+  let Category = DocCatFunction;
+  let Content = [{
+This is a function attribute for CAF users to mark all targeted apis.
+  }];
+}
+
 def LoopHintDocs : Documentation {
   let Category = DocCatStmt;
   let Heading = "#pragma clang loop";
diff --git a/tools/clang/include/clang/Sema/Sema.h b/tools/clang/include/clang/Sema/Sema.h
index 3e455451..cb470317 100644
--- a/tools/clang/include/clang/Sema/Sema.h
+++ b/tools/clang/include/clang/Sema/Sema.h
@@ -2460,6 +2460,8 @@ public:
                                           unsigned AttrSpellingListIndex);
   CafCxxCtorAttr *mergeCafCxxCtorAttr(Decl *D, SourceRange Range,
                                           unsigned AttrSpellingListIndex);
+  CafApiAttr *mergeCafApiAttr(Decl *D, SourceRange Range,
+                                          unsigned AttrSpellingListIndex);                                       
   InternalLinkageAttr *mergeInternalLinkageAttr(Decl *D, SourceRange Range,
                                                 IdentifierInfo *Ident,
                                                 unsigned AttrSpellingListIndex);
@@ -8501,6 +8503,7 @@ public:
   /// attribute to be added (usually because of a pragma).
   void AddOptnoneAttributeIfNoConflicts(FunctionDecl *FD, SourceLocation Loc);
   void AddCafCxxCtorAttribute(FunctionDecl *FD, SourceLocation Loc);
+  void AddCafApiAttribute(FunctionDecl *FD, SourceLocation Loc);
 
   /// AddAlignedAttr - Adds an aligned attribute to a particular declaration.
   void AddAlignedAttr(SourceRange AttrRange, Decl *D, Expr *E,
diff --git a/tools/clang/lib/CodeGen/CodeGenModule.cpp b/tools/clang/lib/CodeGen/CodeGenModule.cpp
index 123826b9..c77a7d31 100644
--- a/tools/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/tools/clang/lib/CodeGen/CodeGenModule.cpp
@@ -1206,7 +1206,9 @@ void CodeGenModule::SetLLVMFunctionAttributesForDefinition(const Decl *D,
   if(LangOpts.CafKeepCxxCtors)
     if(D && D->hasAttr<CafCxxCtorAttr>())
       B.addAttribute(llvm::Attribute::CafCxxCtor);
-    
+  
+  if(D && D->hasAttr<CafApiAttr>())
+      B.addAttribute(llvm::Attribute::CafApi);
 
   if (CodeGenOpts.UnwindTables)
     B.addAttribute(llvm::Attribute::UWTable);
diff --git a/tools/clang/lib/Sema/SemaAttr.cpp b/tools/clang/lib/Sema/SemaAttr.cpp
index 033fb45c..b16fdff1 100644
--- a/tools/clang/lib/Sema/SemaAttr.cpp
+++ b/tools/clang/lib/Sema/SemaAttr.cpp
@@ -713,6 +713,12 @@ void Sema::AddCafCxxCtorAttribute(FunctionDecl *FD,
     FD->addAttr(CafCxxCtorAttr::CreateImplicit(Context, Loc));
 }
 
+void Sema::AddCafApiAttribute(FunctionDecl *FD,
+                                            SourceLocation Loc) {
+  if (!FD->hasAttr<CafApiAttr>())
+    FD->addAttr(CafApiAttr::CreateImplicit(Context, Loc));
+}
+
 typedef std::vector<std::pair<unsigned, SourceLocation> > VisStack;
 enum : unsigned { NoVisibility = ~0U };
 
diff --git a/tools/clang/lib/Sema/SemaDeclAttr.cpp b/tools/clang/lib/Sema/SemaDeclAttr.cpp
index 4a6232ca..d33420cc 100644
--- a/tools/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/tools/clang/lib/Sema/SemaDeclAttr.cpp
@@ -3975,6 +3975,13 @@ CafCxxCtorAttr *Sema::mergeCafCxxCtorAttr(Decl *D, SourceRange Range,
                                           AttrSpellingListIndex);
 }
 
+CafApiAttr *Sema::mergeCafApiAttr(Decl *D, SourceRange Range,
+                                              unsigned AttrSpellingListIndex) {
+
+  return ::new (Context) CafApiAttr(Range, Context,
+                                          AttrSpellingListIndex);
+}
+
 CommonAttr *Sema::mergeCommonAttr(Decl *D, SourceRange Range,
                                   IdentifierInfo *Ident,
                                   unsigned AttrSpellingListIndex) {
@@ -4074,6 +4081,12 @@ static void handleCafCxxCtorAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
     D->addAttr(cafcxxctor);
 }
 
+static void handleCafApiAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
+  if (CafApiAttr *cafapi = S.mergeCafApiAttr(
+          D, AL.getRange(), AL.getAttributeSpellingListIndex()))
+    D->addAttr(cafapi);
+}
+
 static void handleConstantAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
   if (checkAttrMutualExclusion<CUDASharedAttr>(S, D, AL.getRange(),
                                                AL.getName()))
@@ -6132,6 +6145,9 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case ParsedAttr::AT_CafCxxCtor:
     handleCafCxxCtorAttr(S, D, AL);
     break;
+  case ParsedAttr::AT_CafApi:
+    handleCafApiAttr(S, D, AL);
+    break;
   case ParsedAttr::AT_FlagEnum:
     handleSimpleAttribute<FlagEnumAttr>(S, D, AL);
     break;
-- 
2.17.1

